import java.awt.*;import java.awt.Image;import java.awt.Component;import java.io.*;import java.util.*;import java.awt.image.BufferedImage;import javax.imageio.ImageIO;import java.awt.*;/** * @(#)Physical.java * * * @author  * @version 1.00 2011/4/25 */public class Physical {		 //What TYPE of physical is being made(i.e. brick, mushroom, ground, etc)    	public int physId;    	public int indexNum; //////////////////////////////////////////////////////////////////////                       REFERENCE SHEET                          //////////////////////////////////////////////////////////////////////  //		Nothing  			= -1//    	Ground				= 0//		Block				= 1//		MushroomBrick		= 2//		Mushroom			= 3//		Question			= 4//		DeadQuestion		= 5//		WarpPipe			= 6//		Star				= 7//		InvisibleBlock		= 8//		Brick				= 9//		FlagPole			= 10//		UnderGroundBrick	= 11//		UnderGroundGround	= 12//		SideWayWarp			= 13//		DungeonBrick		= 14//		FireWheel			= 15//		SteelBrick			= 16//		BowserPlatform		= 17//		Hammer				= 18//		Coin				= 19//		AboveBowser			= 20    	    	    			//Specific Variables,    and Y position of the left and right side of the object    	public int xLeftBound;    	public int xRightBound;    	public int yTopBound;    	public int yBottomBound;    	public int xLeftWorld;    	    	public int xStart;    	public int yStart;    	   //True if in visible Screen   	public boolean inScreen;    			   //True if in .4 of Screen's right or left bound   	public boolean inMind;   		   	//Image of the physical   	public World compo;   	public Image picture;   	public boolean phase1;   		    	            /**	 *creates a Goomba Object	 *@param x the x position of the Physical	 *@param y he y position of the Physical	 *@param pic the picture of the Physical	 *@param component the World component	 *@param physicalID the number ID of the Physical	 */    public Physical(int x, int y, Component component, Image pic, int ID)     {    	xLeftBound=x;    	yTopBound=y-16;    	xRightBound=x+32;    	yBottomBound=y+16;    	    	xStart = x;    	yStart=y;    	    	compo = (World)component;    	physId = ID;    	    	picture = pic;    	    	//assumes it is i not sight    	inScreen = false;    	inMind =false;    	        	    }        /**     *@return the row of the physical     */    public int getRow()    {    	return (xStart + 16)/32;    }        /**     *@return the col of the physical     */    public int getCol()    {    	return (yStart + 16)/32;    }           /**     *@param i the index number to set the physical too     */    public void setIndex(int i )    {    	indexNum = i;    }        /**     *@return the index Number of the physical     */	    public int getIndex()    {    	return indexNum;    }    /////////////////////////////////////////////////////    /////////////////////////////////////////////////////        	/**	 *how the physcial reacts when mario hits it on his right	 *@param mario the character hitting him	 *@return what the physical turns into	 */    public String physicalRightReact(Mario mario)  throws IOException, ClassNotFoundException    {    	return "_";    }        	/**	 *how the physcial reacts when mario hits it on his left	 *@param mario the character hitting him	 *@return what the physical turns into	 */     public String physicalTopReact(Mario mario) throws IOException, ClassNotFoundException    {    	return "_";    }        /**	 *how the physcial reacts when mario hits it on his head	 *@param mario the character hitting him	 *@return what the physical turns into	 */     public String physicalLeftReact(Mario mario)  throws IOException, ClassNotFoundException    {    	return "_";    }        /**	 *how the physcial reacts when mario hits it on his feet	 *@param mario the character hitting him	 *@return what the physical turns into	 */     public String physicalBottomReact(Mario mario)  throws IOException, ClassNotFoundException    {    	return "_";    }    /////////////////////////////////////////////////////	    /////////////////////////////////////////////////////        /**     *scrolls the physical give pixels at  time     *@param velocity the speed at which to scroll the pixels     */	    public void ScrollingAwareness(int velocity)    {    	    	xLeftBound = xLeftBound+velocity;    	xRightBound = xLeftBound+velocity;    	    	    	//setting boolean if in or out of screen    	if(xRightBound > Constants.inScreenRight || xLeftBound < Constants.inScreenLeft)    	{    		inScreen = true;    	}    	else    	{    		inScreen = false;    	}    	    	//setting boolean if in or out of the games mind    	if(xRightBound > Constants.inMindRight || xLeftBound < Constants.inMindLeft)    	{    		inMind = true;    	}    	else    	{    		inMind = false;    	}    	    	    }        /////////////////////////////////GETTERS        /**     *@return the xLeftBound of the Physical     */    public int getXLeftBound()    {    	return xLeftBound;    }        /**     *@return the xRightBound of the Physical     */    public int getXRightBound()    {    	return xRightBound;    }        /**     *@return the yTopBound of the Physical     */    public int getYTopBound()    {    	return yTopBound;    }        /**     *@return the yBottomBound of the Physical     */    public int getYBottomBound()    {    	return yBottomBound;    }        /**     *@returns the whether or not the physical is in the screen     */    public boolean getInScreen()    {    	return inScreen;    }         /**     *@return the whether or not the physical is in the 4 boxes of the screen     */    public boolean getInMind()    {    	return inMind;    }        /**     *sets the phase of the physcial     *@param y the value to set the phase to     */ 	public void setPhase1(boolean y) 	{ 		phase1 = y; 	} 	 	/**     *@return the phase of the Physical     */ 	public boolean getPhase() 	{ 		return phase1; 	}   	//////////////////////////////////painting the image   	/**   	 *paints the phyical on the component   	 *@param the graphics component   	 */   	public void physicalPaint(Graphics g)	   	{   		if(!inScreen && phase1)   		{   			g.drawImage(picture, xLeftBound, yTopBound, compo);   		}   	}   }