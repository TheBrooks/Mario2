import java.awt.*;import java.awt.image.BufferedImage;import java.io.*;public class Mario{	//////////////////////////////////////	public int lives;	public int coins;	public int points;		public boolean controlled;	////invinsibity	public int invinsibleStart;	public int invinsibleTick;	//Side to Side Variables	public int walkSpeed;	//jump variable	public int jumpSpeed;	//constants	public final int groundFriction = -2;	public final int fallingSpeed = 1;		//booleans	public boolean isJumping; //(only lets jump once in the air)	public boolean canJump;    //(if can continue to jump higher)		public boolean isFalling;	public boolean walkLeft;	public boolean runLeft;	public boolean walkRight;	public boolean runRight;	public boolean isBig;	public boolean isSquat;			public boolean invinsible;		//direction    	public boolean lookingRight;	public World compo;	//Location	public int xStart;	public int yStart;		public int xLeftWorld;	public int yTopWorld;	public int yBottomWorld;			public int xLeft;	public int xRight;	public int yTop;	public int yBottom;	public int xCenter;	public int height;	//animation counter	public int jumpStep;	public int stepStep;	public int fallStep;	public int marioSize;	public int lastMarioSize;	public int pauseStep;			//Images - Small Mario	public BufferedImage DeadLeftLittle;	public BufferedImage DeadRightLittle;	public BufferedImage JumpLeftLittle;	public BufferedImage JumpRightLittle;	public BufferedImage StandingLeftLittle;	public BufferedImage StandingRightLittle;	public BufferedImage StepLeft1Little;	public BufferedImage StepLeft2Little;	public BufferedImage StepLeft3Little;	public BufferedImage StepLeft4Little;	public BufferedImage StepRight1Little;	public BufferedImage StepRight2Little;	public BufferedImage StepRight3Little;	public BufferedImage StepRight4Little;		//Images - Big Mario	public BufferedImage DuckLeftBig;	public BufferedImage DuckRightBig;	public BufferedImage JumpLeftBig;	public BufferedImage JumpRightBig;	public BufferedImage StandingLeftBig;	public BufferedImage StandingRightBig;	public BufferedImage StepLeft1Big;	public BufferedImage StepLeft2Big;	public BufferedImage StepLeft3Big;	public BufferedImage StepLeft4Big;	public BufferedImage StepRight1Big;	public BufferedImage StepRight2Big;	public BufferedImage StepRight3Big;	public BufferedImage StepRight4Big;		//Images - Flower Mario	public BufferedImage DuckLeftFlower;	public BufferedImage DuckRightFlower;	public BufferedImage JumpLeftFlower;	public BufferedImage JumpRightFlower;	public BufferedImage StandingLeftFlower;	public BufferedImage StandingRightFlower;	public BufferedImage StepLeft1Flower;	public BufferedImage StepLeft2Flower;	public BufferedImage StepLeft3Flower;	public BufferedImage StepLeft4Flower;	public BufferedImage StepRight1Flower;	public BufferedImage StepRight2Flower;	public BufferedImage StepRight3Flower;	public BufferedImage StepRight4Flower;	public BufferedImage FireRightFlower;	public BufferedImage FireLeftFlower;			/**	 *creates a new mario object	 *@param x the x position of mario	 *@param y the y position of mario	 *@param component the World in which mario is in	 *@param lives number of lives he has	 *@param coins the number of coins mario has	 *@param points the number of points	 */	public Mario(int x, int y, Component component, int lives, int coins, int points)  throws IOException	{			this.lives = lives;	this.coins = coins;	this.points = points;					fallStep = 0;			compo = (World)component;	xStart = x;	yStart = y;		xLeftWorld = x;	yTopWorld = y;	yBottomWorld = y+32;				xLeft = x;	xRight = xLeft + 32;	xCenter = (xLeft + xRight)/2;	yTop = y;	yBottom = y + 32;	jumpStep = 0;	stepStep = 0;		controlled = true;	canJump = true;	lookingRight = true;	isSquat = false;	invinsible = true;	isJumping= false;	isFalling = true;	walkSpeed = 0;	jumpSpeed = 0;	marioSize=0;	pauseStep = 0;	////just until testing is right	walkSpeed = 1;	jumpSpeed = 1;	}	/////////////////////////////////////////////GETTERS	/**	 *changes the lives of mario	 *@param the number of lives to add	 */	public void lifeChange(int i)	{		lives += lives;	}		/**	 *adds a coin to maios coin coint	 * if 100 set to 0 and add one life	 */	public void addCoin()	{		coins += 1;		if(coins == 100)		{			coins = 0;			lives++;		}			}		/**	 *adds a certain amount of points to mario's points	 *@param i the number of points to add	 */	public void addPoints(int i )	{		points += i;	}		/**	 *@return mario's size	 */	public int getMarioSize()	{		return marioSize;	}		/**	 *@return mario's x left on the screen	 */	public int getLeft()	{		return xLeft;	}		/**	 *@return mario's x right on the screen	 */	public int getRight()	{		return xRight;	}	/**		 *@return mario's y top on the screen	 */	public int getTop()	{		return yTop;	}	/**		 *@return mario's y bottom on the screen	 */	public int getBottom()	{		return yBottom;	}		/**	 *@return mario's x Left on the World	 */	public int getLeftWorld()	{		return xLeftWorld;	}		/**	 *@return mario's y Top on the World	 */	public int getTopWorld()	{		return yTopWorld;	}	/**	 *@return mario's y bottom on the World	 */	public int getBottomWorld()	{		return yBottomWorld;	}			/**	 *@return mario's x center on the World	 */	public int getCenter()	{		return xCenter;	}	/**	 *@return if mario is falling or not	 */	public boolean isFalling()	{		return isFalling;	}		/**	 *@return if mario is jumping or not	 */	public boolean isJumping()	{		return isJumping;	}	/**	 *@return which diretion mario is facing	 */	public boolean getDirection()	{		return lookingRight;	}		/**	 *@return if mario is big or not	 */	public boolean isBig()	{		return isBig;	}		/**	 *@return if mario is squatting or not	 */	public boolean squatting()	{		return isSquat;	}		/**	 *@return if mario has fallen of the screen downwards or not	 */	public boolean fallenToDeath()	{		if(yTop > 480)			{			return true;		}		return false;	}	////////////////////////////////////////SETTERS	/**	 *sets mario's images	 *@param DeadLeftLittle mario animation image	 *@param  DeadRightLittle mario animation image;	 * @param  JumpLeftLittle mario animation image;	 * @param  JumpRightLittle mario animation image;	 * @param  StandingLeftLittle mario animation image;	 * @param  StandingRightLittle mario animation image;	 * @param  StepLeft1Little mario animation image;	  *@param  StepLeft2Little mario animation image;	 * @param  StepLeft3Little mario animation image;	 * @param  StepLeft4Little mario animation image;	 * @param  StepRight1Little mario animation image;	  *@param  StepRight2Little mario animation image;	  *@param  StepRight3Little mario animation image;	  *@param  StepRight4Little mario animation image;	  *@param  DuckLeftBig mario animation image;	 * @param  DuckRightBig mario animation image;	 * @param  JumpLeftBig mario animation image;	 * @param  JumpRightBig mario animation image;	 * @param  StandingLeftBig mario animation image;	 * @param  StandingRightBig mario animation image;	 * @param  StepLeft1Big mario animation image;	 * @param  StepLeft2Big mario animation image;	 * @param  StepLeft3Big mario animation image;	 * @param  StepLeft4Big mario animation image;	 * @param  StepRight1Big mario animation image;	 * @param  StepRight2Big mario animation image;	 * @param  StepRight3Big mario animation image;	 * @param  StepRight4Big mario animation image;	 * @param  DuckLeftFlower mario animation image;	 * @param  DuckRightFlower mario animation image;	 * @param  JumpLeftFlower mario animation image;	 * @param  JumpRightFlower mario animation image;	 * @param  StandingLeftFlower mario animation image;	 * @param  StandingRightFlower mario animation image;	 * @param  StepLeft1Flower mario animation image;	 * @param  StepLeft2Flower mario animation image;	 * @param  StepLeft3Flower mario animation image;	 * @param  StepLeft4Flower mario animation image;	 * @param  StepRight1Flower mario animation image;	 * @param  StepRight2Flower mario animation image;	 * @param  StepRight3Flower mario animation image;	 * @param  StepRight4Flower mario animation image;	 * @param  FireRightFlower mario animation image;	 * @param  FireLeftFlower mario animation image;	 */	public void imageSetter(BufferedImage DeadLeftLittle,	 BufferedImage DeadRightLittle,  BufferedImage JumpLeftLittle, 	 BufferedImage JumpRightLittle,	 BufferedImage StandingLeftLittle,	 BufferedImage StandingRightLittle,	 BufferedImage StepLeft1Little,	 BufferedImage StepLeft2Little,	 BufferedImage StepLeft3Little,	 BufferedImage StepLeft4Little,	 BufferedImage StepRight1Little,	 BufferedImage StepRight2Little,	 BufferedImage StepRight3Little,	 BufferedImage StepRight4Little,	 BufferedImage DuckLeftBig,	 BufferedImage DuckRightBig,	 BufferedImage JumpLeftBig,	 BufferedImage JumpRightBig,	 BufferedImage StandingLeftBig,	 BufferedImage StandingRightBig,	 BufferedImage StepLeft1Big,	 BufferedImage StepLeft2Big,	 BufferedImage StepLeft3Big,	 BufferedImage StepLeft4Big,	 BufferedImage StepRight1Big,	 BufferedImage StepRight2Big,	 BufferedImage StepRight3Big,	 BufferedImage StepRight4Big,	 BufferedImage DuckLeftFlower,	 BufferedImage DuckRightFlower,	 BufferedImage JumpLeftFlower,	 BufferedImage JumpRightFlower,	 BufferedImage StandingLeftFlower,	 BufferedImage StandingRightFlower,	 BufferedImage StepLeft1Flower,	 BufferedImage StepLeft2Flower,	 BufferedImage StepLeft3Flower,	 BufferedImage StepLeft4Flower,	 BufferedImage StepRight1Flower,	 BufferedImage StepRight2Flower,	 BufferedImage StepRight3Flower,	 BufferedImage StepRight4Flower,	 BufferedImage FireRightFlower,	 BufferedImage FireLeftFlower)	{	  this.DeadLeftLittle = DeadLeftLittle;	  this.DeadRightLittle = DeadRightLittle;	  this.JumpLeftLittle = JumpLeftLittle;	  this.JumpRightLittle = JumpRightLittle;	  this.StandingLeftLittle = StandingLeftLittle;	  this.StandingRightLittle = StandingRightLittle;	  this.StepLeft1Little = StepLeft1Little;	  this.StepLeft2Little = StepLeft2Little;	  this.StepLeft3Little = StepLeft3Little;	  this.StepLeft4Little = StepLeft4Little;	  this.StepRight1Little = StepRight1Little;	  this.StepRight2Little = StepRight2Little;	  this.StepRight3Little = StepRight3Little;	  this.StepRight4Little = StepRight4Little;	  this.DuckLeftBig = DuckLeftBig;	  this.DuckRightBig = DuckRightBig;	  this.JumpLeftBig = JumpLeftBig;	  this.JumpRightBig = JumpRightBig;	  this.StandingLeftBig = StandingLeftBig;	  this.StandingRightBig = StandingRightBig;	  this.StepLeft1Big = StepLeft1Big;	  this.StepLeft2Big = StepLeft2Big;	  this.StepLeft3Big = StepLeft3Big;	  this.StepLeft4Big = StepLeft4Big;	  this.StepRight1Big = StepRight1Big;	  this.StepRight2Big = StepRight2Big;	  this.StepRight3Big = StepRight3Big;	  this.StepRight4Big = StepRight4Big;	  this.DuckLeftFlower = DuckLeftFlower;	  this.DuckRightFlower = DuckRightFlower;	  this.JumpLeftFlower = JumpLeftFlower;	  this.JumpRightFlower = JumpRightFlower;	  this.StandingLeftFlower = StandingLeftFlower;	  this.StandingRightFlower = StandingRightFlower;	  this.StepLeft1Flower = StepLeft1Flower;	  this.StepLeft2Flower = StepLeft2Flower;	  this.StepLeft3Flower = StepLeft3Flower;	  this.StepLeft4Flower = StepLeft4Flower;	  this.StepRight1Flower = StepRight1Flower;	  this.StepRight2Flower = StepRight2Flower;	  this.StepRight3Flower = StepRight3Flower;	  this.StepRight4Flower = StepRight4Flower;	  this.FireRightFlower = FireRightFlower;	  this.FireLeftFlower = FireLeftFlower;	}		/**	 *sets mario looking direction	 *@param direction true = right false = left	 */	public void setDirectionRight(boolean direction) //true to set direction to right	{		lookingRight = direction;	}		/**	 *sets mario size as a int	 *@param size the int value of mario size	 */	public void setMarioSize(int size)  throws IOException	{		lastMarioSize = marioSize;		if(size>2)		{			marioSize = 2;		}		else			marioSize = size;				if(marioSize == 0)		{			isBig = false;		}		else		{			isBig = true;					}				if(marioSize == 0)		{			height = 32;		}		else		{			height = 64;		}				if(lastMarioSize == 0 && marioSize == 1)		{			yTop -=32;			yTopWorld -=32;					}		else if (lastMarioSize == 0 && marioSize == 2)		{			yTop -=32;			yTopWorld -=32;		}		else if((lastMarioSize == 2 && marioSize ==0 )||(lastMarioSize == 1 && marioSize ==0 ))		{			yTop += 32;			yTopWorld += 32;		}				if(marioSize == -1)		{						lives--;			resetMario();					}			}		/**	 *not used	 */		public void setSquat(boolean down)  // not gonna use	{		if(!isJumping && !isFalling)		{			isSquat = down;		}	}		/**	 *sets walkleft boolean	 *@param direction wheter walking left or right	 *	 */	public void walkLeft(boolean direction)	{		walkLeft = direction;		walkRight = !direction;	}		/**	 *sets mario x walues	 *@param x the value to set X to	 */	public void setX(int x)	{		xLeft = x;		xRight = xLeft + 32;	}		/**	 *sets mario y values	 *@param y the value to set Y to	 */	public void setY(int y)	{		yTop = y;		yBottom = yTop + height;	}		/**	 *sets walkright boolean	 *@param direction wheter walking left or right	 *	 */	public void walkRight(boolean direction)	{		walkRight = direction;		walkLeft = !direction;	}	/**	 *the math behind mario's movements	 *@param vaule wheter the screen can scroll too	 *@param run the speed of mario	 *@param collisioned if mario has been stuck to a wall	 */	public void move(boolean value, boolean run, boolean collisioned)	{		if(walkRight && run)		{			if(value)			{				xRight += walkSpeed;				xLeft += walkSpeed;				xCenter += walkSpeed;				}			if(!collisioned)			{				xLeftWorld+=walkSpeed;			}																		pauseStep++;			if(pauseStep % 15 == 0)			{				if(stepStep == 3)  // sets the picture every step				{					stepStep = 0;				}				else					stepStep++;										lookingRight = true;			}								}		else if(walkLeft && run)		{			if(xLeft - walkSpeed >= 0)  // makes sure that hes not running out of the screan			{				if(value)				{					xRight -= walkSpeed;					xLeft -= walkSpeed;					xCenter -= walkSpeed;				}				if(!collisioned)				{					xLeftWorld-=walkSpeed;				}						pauseStep++;			if(pauseStep % 15 == 0)			{					if(stepStep == 3)				{					stepStep = 0;				}				else					stepStep++;										}						lookingRight = false;			}								}		else if(walkRight)		{			if(value)			{				xRight += walkSpeed;				xLeft += walkSpeed;				xCenter += walkSpeed;				}			if(!collisioned)			{			xLeftWorld+=walkSpeed;			}						pauseStep++;			if(pauseStep % 25 == 0)			{				if(stepStep == 3)  // sets the picture every step				{					stepStep = 0;				}				else					stepStep++;										lookingRight = true;			}								}		else if(walkLeft )		{			if(xLeft - walkSpeed >= 0)  // makes sure that hes not running out of the screan			{				if(value)				{					xRight -= walkSpeed;					xLeft -= walkSpeed;					xCenter -= walkSpeed;				}				if(!collisioned)				{				xLeftWorld-=walkSpeed;				}							pauseStep++;			if(pauseStep % 25 == 0)			{					if(stepStep == 3)				{					stepStep = 0;				}				else					stepStep++;										}						lookingRight = false;			}								}						if(isFalling)  		{			if(fallStep > 90)			{				yTop += 3*jumpSpeed;				yBottom += 3*jumpSpeed;				yBottomWorld  += 3*jumpSpeed;				yTopWorld  += 3*jumpSpeed;			}			else if(fallStep > 45)			{				yTop += 2*jumpSpeed;				yBottom += 2*jumpSpeed;				yBottomWorld  += 2*jumpSpeed;				yTopWorld  += 2*jumpSpeed;			}			else			{				yTop += jumpSpeed;				yBottom += jumpSpeed;				yBottomWorld  += jumpSpeed;				yTopWorld  += jumpSpeed;			}			fallStep++;		}				if(isJumping && compo.back.collisionU)		{			canJump = false;			isFalling = true;			isJumping = false;//stops the jumping after 40 ticks.			jumpStep = 0;//should maybe initiaze falling here??						}		else if(isJumping && !compo.back.collisionU) //how is y affected during jumping		{								canJump = false;			isFalling = false;									if(jumpStep < 40)			{				yTop -= 2*jumpSpeed;				yBottom -= 2*jumpSpeed;				yBottomWorld -= 2*jumpSpeed;				yTopWorld -= 2*jumpSpeed;				jumpStep++;			}			else if(jumpStep < 100)			{				yTop -= jumpSpeed;				yBottom -= jumpSpeed;				yBottomWorld -= jumpSpeed;				yTopWorld -= jumpSpeed;				jumpStep++;			}			else			{				isJumping = false;				isFalling = true;				jumpStep = 0;				fallStep = 0;			}								}								}		/**	 *controlls Mario's movents vertically	 */	public void verticalMove()	{					if(isFalling)  		{						canJump = false;			jumpStep = 140;			if(fallStep > 90)			{				yTop += 3*jumpSpeed;				yBottom += 3*jumpSpeed;				yBottomWorld  += 3*jumpSpeed;				yTopWorld  += 3*jumpSpeed;			}			else if(fallStep > 45)			{				yTop += 2*jumpSpeed;				yBottom += 2*jumpSpeed;				yBottomWorld  += 2*jumpSpeed;				yTopWorld  += 2*jumpSpeed;			}			else			{				yTop += jumpSpeed;				yBottom += jumpSpeed;				yBottomWorld  += jumpSpeed;				yTopWorld  += jumpSpeed;			}			fallStep++;		}				if(isJumping && !compo.back.collisionU) //this is the jumping method until hit.		{						canJump = false;			isFalling = false;									if(jumpStep < 40)			{				yTop -= 2*jumpSpeed;				yBottom -= 2*jumpSpeed;				yBottomWorld -= 2*jumpSpeed;				yTopWorld -= 2*jumpSpeed;				jumpStep++;			}			else if(jumpStep < 100)			{				yTop -= jumpSpeed;				yBottom -= jumpSpeed;				yBottomWorld -= jumpSpeed;				yTopWorld -= jumpSpeed;				jumpStep++;			}			else			{				isJumping = false;				isFalling = true;				jumpStep = 0;				fallStep = 0;			}								}		else if(isJumping && compo.back.collisionU)		{			canJump = false;			isFalling = true;									isJumping = false; 													}												}		/**	 *sets if mario is falling or not	 *@param value if he is falling ot not	 */	public void setIsFalling(boolean value)	{		isFalling = value;	}		/**	 *sets if mario is jumping or not	 *@param value if he is jumping ot not	 */	public void setIsJumping(boolean value)	{		isJumping = value;	}			/**	 *sets mario walking speed	 *@param i the speed mario walks	 */	public void setWalkSpeed(int i )	{			walkSpeed = i;	}		/**	 *the speed to scroll the screen	 *@param velocity the speed to scroll the screen	 */	public void scrollRight(int velocity)	{		if(velocity >= 0)		{			xLeft += velocity;			xRight += velocity;		}		}		/**	 *didnt have time to implement yet	 */	public boolean startInvinsible()	{		if(invinsibleStart == 0)		{			invinsible();			return false;		}		else		{			invinsibleStart = 0;			return true;		}				}		/**	 *didnt have time to implement yet	 */	public void invinsible()	{		invinsible = true;		if(invinsibleTick >= 40)			vinsible();		else			invinsibleTick++;			}		/**	 *didnt have time to implement yet	 */	public void vinsible()	{		invinsibleTick = 0;		invinsibleStart = -1;		invinsible = false;			}		/**	 *didnt have time to implement yet	 */	public boolean controlled()	{		return controlled;	}		/**	 *subtracts a live and resets mario	 */	public void kill()  throws IOException, ClassNotFoundException	{				lives--;		resetMario();			}		/**	 *restarts the level over with original mario position and 	 *physical positions	 */	public void resetMario() throws IOException	{		if(lives >= 1 && controlled)		{			int arraySize = compo.WR.everything.size();			for(int w = 0; w < arraySize; w++)			{				((Physical)compo.WR.everything.get(w)).xLeftBound = ((Physical)compo.WR.everything.get(w)).xStart;				((Physical)compo.WR.everything.get(w)).xRightBound = ((Physical)compo.WR.everything.get(w)).xStart + 32;				((Physical)compo.WR.everything.get(w)).yTopBound = ((Physical)compo.WR.everything.get(w)).yStart-16;				((Physical)compo.WR.everything.get(w)).yBottomBound = ((Physical)compo.WR.everything.get(w)).yStart + 16;				((Physical)compo.WR.everything.get(w)).inScreen = false;				((Physical)compo.WR.everything.get(w)).inMind = false;			}									xLeft = xStart;			xRight = xStart + 32;			xLeftWorld = xStart;									yTop = yStart;			yTopWorld = yStart;			yBottom = yStart + 32;			yBottomWorld = yStart + 32;						marioSize = 0;			isBig = false;						jumpStep = 0;			stepStep = 0;						controlled = true;			canJump = true;			lookingRight = true;			isSquat = false;			invinsible = false;			isJumping= false;			isFalling = true;															compo.back.xPos = 0;		}		else if(controlled)		{					compo.highScore.addScore(points);			compo.highScore.highScores();			controlled = false;			compo.highScore.save();					}					}		/**	 *draws mario according to steps	 *appears as if animation	 *@param g the graphics component	 *	 */	public void drawMario(Graphics g)	{		if(marioSize == 0) //draws little mario		{			if(!isJumping && !isFalling)			{				if(lookingRight)				{					if(walkRight)					{						if(stepStep == 0)						{							g.drawImage(StepRight1Little, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepRight2Little, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepRight3Little, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepRight4Little, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingRightLittle, xLeft, yTop, compo);					}														}				else if(!lookingRight)				{					if(walkLeft)					{						if(stepStep == 0)						{							g.drawImage(StepLeft1Little, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepLeft2Little, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepLeft3Little, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepLeft4Little, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingLeftLittle, xLeft, yTop, compo);						}									}			}			else //jumping and falling picture happens to be the same			{				if(lookingRight)				{						g.drawImage(JumpRightLittle, xLeft, yTop, compo);				}				else				{						g.drawImage(JumpLeftLittle, xLeft, yTop, compo);				}			}		}		else if(marioSize == 1 ) //draws big Mario		{			if(!isJumping && !isFalling)			{				if(lookingRight)				{					if(walkRight)					{						if(stepStep == 0)						{							g.drawImage(StepRight1Big, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepRight2Big, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepRight3Big, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepRight4Big, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingRightBig, xLeft, yTop, compo);					}									}				else if(!lookingRight)				{					if(walkLeft)					{						if(stepStep == 0)						{							g.drawImage(StepLeft1Big, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepLeft2Big, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepLeft3Big, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepLeft4Big, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingLeftBig, xLeft, yTop, compo);						}				}			}			else //jumping and falling picture happens to be the same			{				if(lookingRight)				{						g.drawImage(JumpRightBig, xLeft, yTop, compo);				}				else				{						g.drawImage(JumpLeftBig, xLeft, yTop, compo);				}			}					}		else if(marioSize == 2) //Draws Fire Mario		{			if(!isJumping && !isFalling)			{				if(lookingRight)				{					if(walkRight)					{						if(stepStep == 0)						{							g.drawImage(StepRight1Flower, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepRight2Flower, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepRight3Flower, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepRight2Flower, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingRightFlower, xLeft, yTop, compo);					}									}				else if(!lookingRight)				{					if(walkLeft)					{						if(stepStep == 0)						{							g.drawImage(StepLeft1Flower, xLeft, yTop, compo);						}						else if (stepStep == 1)						{							g.drawImage(StepLeft2Flower, xLeft, yTop, compo);						}						else if(stepStep == 2)						{							g.drawImage(StepLeft3Flower, xLeft, yTop, compo);						}						else if(stepStep == 3)						{							g.drawImage(StepLeft2Flower, xLeft, yTop, compo);						}					}					else					{						g.drawImage(StandingLeftFlower, xLeft, yTop, compo);						}				}			}			else //jumping and falling picture happens to be the same			{				if(lookingRight)				{						g.drawImage(JumpRightFlower, xLeft, yTop, compo);				}				else				{						g.drawImage(JumpLeftFlower, xLeft, yTop, compo);				}			}		}			}	}